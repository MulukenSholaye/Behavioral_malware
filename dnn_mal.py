# -*- coding: utf-8 -*-
"""DNN_Mal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fiH3396_QgUqm5tdTAPWztdN2supqPJa
"""

import re
from sklearn import svm
import pandas as pd
import numpy as np
from numpy.core.fromnumeric import size
from numpy import loadtxt
from keras.models import Sequential
from keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn import preprocessing
from sklearn.metrics import confusion_matrix, accuracy_score
from sklearn import metrics
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import GaussianNB
from sklearn.model_selection import train_test_split
h = range(340)
a = pd.read_csv("all_data_cleaned_2.csv", delimiter = ',')# names=h)
a.columns = range(len(a.columns))
labels = pd.read_csv("labels.csv")
X = a.iloc[:, :-1].values
y = labels.values
row, col = a.shape
col = col -1
label_encoder = preprocessing.LabelEncoder()
y= label_encoder.fit_transform(y)
sc = StandardScaler()
X = sc.fit_transform(X)
print(col)
model = Sequential()
model.add(Dense(col, input_dim=col, activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
# # compile the keras model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
# # fit the keras model on the dataset
model.fit(X, y, epochs=350, batch_size=50)
# # evaluate the keras model
_, accuracy = model.evaluate(X, y)
print('Accuracy: %.2f' % (accuracy*100))

